\begin{table}[h!]
	\centering
	\def\arraystretch{1.2}
	\begin{tabular}{||c c c c c||} 
		\hline
		Product & Units & Price (\euro) & Useful life (years) & Amortization (\euro) \\ [0.5ex] 
		\hline\hline
		Ubuntu 18.04 & 1 & 0 \euro & - & 0 \euro \\ 
		\hline
		Google Chrome & 1 & 0 \euro & - & 0 \euro \\
		\hline
		Evince & 1 & 0 \euro & - & 0 \euro \\
		\hline\hline
		Total &  & 0 \euro &  & 0 \euro \\
		\hline
		\hline
	\end{tabular}
	\caption{Software costs}
\end{table}

\begin{itemize}
	\item Context and Scope of the project
	\item Project planning
	\item Budget and sustainability
\end{itemize}

\begin{figure}[ht]
	\centering	
	\includegraphics[width=0.9\linewidth]{gantt.png}
	\caption{Gantt chart with the planning of the project }
\end{figure}



\begin{algorithm}
	\caption{My algorithm}\label{euclid}
	\begin{algorithmic}[1]
		\Procedure{MyProcedure}{}
		\State $\textit{stringlen} \gets \text{length of }\textit{string}$
		\State $i \gets \textit{patlen}$
		\BState \emph{top}:
		\If {$i > \textit{stringlen}$} \Return false
		\EndIf
		\State $j \gets \textit{patlen}$
		\BState \emph{loop}:
		\If {$\textit{string}(i) = \textit{path}(j)$}
		\State $j \gets j-1$.
		\State $i \gets i-1$.
		\State \textbf{goto} \emph{loop}.
		\State \textbf{close};
		\EndIf
		\State $i \gets i+\max(\textit{delta}_1(\textit{string}(i)),\textit{delta}_2(j))$.
		\State \textbf{goto} \emph{top}.
		\EndProcedure
	\end{algorithmic}
\end{algorithm}


\begin{lstlisting}[language=Python, caption=Python example]
import numpy as np

def incmatrix(genl1,genl2):
	m = len(genl1)
	n = len(genl2)
	M = None #to become the incidence matrix
	VT = np.zeros((n*m,1), int)  #dummy variable
	
	#compute the bitwise xor matrix
	M1 = bitxormatrix(genl1)
	M2 = np.triu(bitxormatrix(genl2),1) 
	
	for i in range(m-1):
	for j in range(i+1, m):
	[r,c] = np.where(M2 == M1[i,j])
	for k in range(len(r)):
	VT[(i)*n + r[k]] = 1;
	VT[(i)*n + c[k]] = 1;
	VT[(j)*n + r[k]] = 1;
	VT[(j)*n + c[k]] = 1;
	
	if M is None:
	M = np.copy(VT)
	else:
	M = np.concatenate((M, VT), 1)
	
	VT = np.zeros((n*m,1), int)
	
	return M
\end{lstlisting}